#line 1 "CMakeCUDACompilerId.cu"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"























































#line 57 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"









#line 67 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 70 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 71 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

















#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"






#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"






#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"



#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"













#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"











#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"



















#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"







#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"



#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"















#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"






#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"







#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"








#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"







#pragma once


















    
#line 29 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    
    

#line 39 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        


            
        #line 44 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    #line 45 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 46 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"













#pragma once







































































































































#line 151 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 155 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
































#line 188 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 190 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





#line 196 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 200 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 207 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 219 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








#line 228 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 229 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






























#line 1586 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
























#line 1611 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"












#line 1624 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































#line 1663 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"















































































































#line 1775 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































































































#line 1878 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








































































































































































#line 2047 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





































































































#line 2149 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



















































































































































































































#line 2361 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
extern "C" {




#line 2367 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



































































































































































































































#line 2595 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









































































































































































































































#line 2868 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









#line 2878 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"


    
    
#line 2883 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2890 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2891 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2898 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2899 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 2911 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

































#line 2945 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






















}
#line 2969 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
















































































































































































































































#line 265 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"



#line 269 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















































































#line 352 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


}
#line 356 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"

#line 358 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
#line 2971 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 48 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"



#line 24 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 33 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 42 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    


#line 48 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 54 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"



#line 58 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
    
    
#line 61 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 73 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"







#line 81 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 93 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 99 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 111 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 122 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


} 
#line 126 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    } 

    





#line 163 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

#pragma pack(pop)
#line 49 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    



    





















#line 82 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    


        
    #line 93 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 94 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
















    

#line 113 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 115 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 117 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 118 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    

#line 123 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 125 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 126 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"





#line 132 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
    
#line 135 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 141 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"








    


#line 153 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 157 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
#line 159 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 165 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
        
    

#line 173 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 174 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 188 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 198 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



    
#line 203 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 207 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 211 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"








    
        
    

#line 224 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 225 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


#line 231 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 243 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






#line 250 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
    





#line 261 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 262 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 266 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
    


#line 274 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 275 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 286 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 287 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 295 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 299 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 10 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







#pragma once



__pragma(pack(push, 8)) extern "C" {









    

#line 25 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

#line 27 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 29 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 30 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"




    
#line 36 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 41 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

#line 43 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 45 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 46 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 50 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 52 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


#line 58 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 64 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 66 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 73 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 77 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 79 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    
#line 90 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













    


        
    #line 108 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 109 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 113 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 115 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 119 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 121 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 125 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 127 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 148 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;






#line 158 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    
#line 170 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















    

#line 192 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 194 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 195 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 199 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 203 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


 
  

#line 209 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
   
  #line 211 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
 





#line 218 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 219 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







    











        
    #line 240 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 241 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 245 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    

#line 252 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 253 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

























 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 308 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 309 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















#line 329 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    



#line 338 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 339 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    






        
    #line 357 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 358 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        
    #line 365 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 366 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 370 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













#line 384 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"















#line 400 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 407 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 411 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 416 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 417 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        


            
        #line 427 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 428 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 429 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 433 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 439 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        



    #line 449 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 450 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    



#line 459 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 469 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
              
        

#line 476 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    



#line 481 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 489 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 497 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 498 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 502 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 542 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 546 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 553 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 554 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



    
#line 559 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 563 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 739 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 740 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1815 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 2005 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 2006 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 2007 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))
#line 11 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"









    

#line 23 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 25 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 26 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"



    

#line 32 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 34 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 35 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"



    

#line 41 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 43 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 44 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"


    

#line 49 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        

#line 52 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
            
        #line 54 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
    #line 55 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 56 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"


    

#line 61 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"

#line 63 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 65 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 66 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"


#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"



#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"






#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdarg"

#pragma once




#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#pragma once




#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#pragma once










































































































































































































 
  

#line 209 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
   
  #line 211 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 





#line 218 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 219 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

  
























































































#line 262 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"
 #line 263 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#line 265 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#line 267 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"
#line 268 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"





#line 221 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"

































































#line 222 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 

#line 227 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
  
 #line 229 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 230 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 234 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 238 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 


#line 246 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 250 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"










 
#line 262 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





 





  
 #line 275 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 276 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 283 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 284 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"






 





#line 297 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
  

#line 300 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 

#line 303 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 304 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
 



#line 312 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 316 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 320 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




#line 325 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 327 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




#line 332 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 334 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 339 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 344 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 349 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 354 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 359 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 364 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"






 
#line 372 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 377 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  


 #line 386 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 387 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 392 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  


 #line 401 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 402 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 407 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  



 #line 417 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 418 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 423 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"









 
#line 434 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




#line 439 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
 
#line 442 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 447 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 451 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 453 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 


  
 #line 462 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 463 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"











#line 476 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 478 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"






#line 486 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 488 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 498 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 500 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 510 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 512 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 522 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 524 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"







#line 533 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 535 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 545 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 547 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 557 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 559 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"







#line 568 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 570 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"







#line 579 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 581 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"








#line 591 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 593 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"











#line 606 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 608 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"







#line 617 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 619 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"












#line 633 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 635 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 








#line 649 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 







#line 662 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
  
 #line 664 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 665 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 672 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 673 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 680 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 681 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"












































































#line 758 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 
#line 760 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 764 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 768 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 772 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"














 


  
 #line 791 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 792 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





		












 

 
 





#line 820 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#line 822 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 823 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





#line 8 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"







#pragma once




extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 


























#line 46 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"



    namespace std
    {
        struct nothrow_t {

            explicit nothrow_t() = default;
#line 55 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
        };

        


            extern nothrow_t const nothrow;
        #line 62 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
    }
#line 64 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;






























































#line 177 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"

#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 

    
         
    inline void* __cdecl operator new(size_t _Size,   void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }
#line 195 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"


    
         
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }
#line 210 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma warning(pop)
#pragma pack(pop)

} 
#line 219 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#line 11 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"


extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

#line 53 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 60 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
#line 14 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 235 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 586 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 686 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"











    

    
        
    #line 702 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
        
    #line 706 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
        
    #line 710 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 767 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"













    
#line 782 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))
#line 811 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"
#line 9 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )














#line 28 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 30 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

		

	







		
		


			
		#line 47 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 48 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 49 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"










































	
	






		


			
		#line 104 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 105 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
	




		

#line 115 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
			
		#line 117 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 118 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
	

#line 123 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 125 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
		
	#line 127 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 129 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 134 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 138 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
		
			#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")
		





#line 149 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 150 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 151 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"








	
		
	

#line 164 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 165 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"



























 
#line 194 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"




 
#line 200 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"













#pragma once








#line 24 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"














    
    
#line 41 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"



#line 45 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"
    

    

#line 50 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"
#line 51 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"



    
#line 56 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#pragma comment(lib, "libcpmt" "" "")






#line 65 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#line 67 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#line 69 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"
#line 202 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"




















#line 223 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 228 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 230 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 231 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 236 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 238 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 239 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 
  





#line 249 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 251 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 252 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 

#line 256 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 261 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   


     
   #line 266 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  #line 267 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 268 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 








 

#line 281 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  

#line 284 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 286 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 287 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 288 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 

#line 293 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  


   
  #line 298 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 299 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 300 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 

#line 305 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  
 #line 307 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 308 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 


  
 #line 315 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 316 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

		





		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		
class  _Lockit
	{	
public:
 
















#line 360 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
 #line 364 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;
	};

 


































































  



  


  



  


  
 #line 464 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

class  _Init_locks
	{	
public:
 










#line 480 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
 #line 483 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);
	};

		

 
 
 
 

 
 

 





#line 506 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  
 #line 508 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"















#line 524 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}
 #line 526 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"





 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 536 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 537 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"





#line 8 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdarg"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdarg.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 9 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdarg"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using ::va_list;
}



#pragma warning(pop)
#pragma pack(pop)

#line 27 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdarg"
#line 28 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdarg"





#line 254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"
#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"





























#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"



#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"

#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"




#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_config.h"
#line 84 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"










































#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"










#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"








































#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"








#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"








#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"










#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
        





#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"








#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"


#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};




#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"

#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;



#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;






#line 438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"

#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"

















#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"









































#line 71 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    

#line 78 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 79 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    #line 84 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 85 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"



} __pragma(pack(pop))
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 26 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"





     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

#line 38 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"









#line 48 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"
    
#line 50 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 59 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
















 





































































#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"





#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"











enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorInvalidValue                 =     1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    




    cudaErrorCudartUnloading              =     4,

    




    cudaErrorProfilerDisabled             =     5,

    





    cudaErrorProfilerNotInitialized       =     6,

    




    cudaErrorProfilerAlreadyStarted       =     7,

    




     cudaErrorProfilerAlreadyStopped       =    8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    





    cudaErrorInvalidHostPointer           =     16,
  
    





    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
    
    



    cudaErrorMissingConfiguration         =      52,
  
    






    cudaErrorPriorLaunchFailure           =      53,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
  
    



    cudaErrorInvalidDeviceFunction        =      98,
  
    



    cudaErrorNoDevice                     =     100,
  
    



    cudaErrorInvalidDevice                =     101,

    


    cudaErrorStartupFailure               =    127,
  
    


    cudaErrorInvalidKernelImage           =     200,

    







    cudaErrorDeviceUninitilialized        =     201,

    


    cudaErrorMapBufferObjectFailed        =     205,
  
    


    cudaErrorUnmapBufferObjectFailed      =     206,

    



    cudaErrorArrayIsMapped                =     207,

    


    cudaErrorAlreadyMapped                =     208,
  
    





    cudaErrorNoKernelImageForDevice       =     209,

    


    cudaErrorAlreadyAcquired              =     210,

    


    cudaErrorNotMapped                    =     211,

    



    cudaErrorNotMappedAsArray             =     212,

    



    cudaErrorNotMappedAsPointer           =     213,
  
    



    cudaErrorECCUncorrectable             =     214,
  
    



    cudaErrorUnsupportedLimit             =     215,
    
    



    cudaErrorDeviceAlreadyInUse           =     216,

    



    cudaErrorPeerAccessUnsupported        =     217,

    



    cudaErrorInvalidPtx                   =     218,

    


    cudaErrorInvalidGraphicsContext       =     219,

    



    cudaErrorNvlinkUncorrectable          =     220,

    




    cudaErrorJitCompilerNotFound          =     221,

    


    cudaErrorInvalidSource                =     300,

    


    cudaErrorFileNotFound                 =     301,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     302,
  
    


    cudaErrorSharedObjectInitFailed       =     303,

    


    cudaErrorOperatingSystem              =     304,
  
    




    cudaErrorInvalidResourceHandle        =     400,

    



    cudaErrorIllegalState                 =     401,

    



    cudaErrorSymbolNotFound               =     500,
  
    





    cudaErrorNotReady                     =     600,

    





    cudaErrorIllegalAddress               =     700,
  
    






    cudaErrorLaunchOutOfResources         =      701,
  
    








    cudaErrorLaunchTimeout                =      702,

    



    cudaErrorLaunchIncompatibleTexturing  =     703,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     704,
    
    




    cudaErrorPeerAccessNotEnabled         =     705,
  
    










    cudaErrorSetOnActiveProcess           =     708,

    




    cudaErrorContextIsDestroyed           =     709,

    




    cudaErrorAssert                        =    710,
  
    




    cudaErrorTooManyPeers                 =     711,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     712,
        
    



    cudaErrorHostMemoryNotRegistered      =     713,

    






    cudaErrorHardwareStackError           =     714,

    





    cudaErrorIllegalInstruction           =     715,

    






    cudaErrorMisalignedAddress            =     716,

    








    cudaErrorInvalidAddressSpace          =     717,

    





    cudaErrorInvalidPc                    =     718,
  
    








    cudaErrorLaunchFailure                =      719,

    






    cudaErrorCooperativeLaunchTooLarge    =     720,
    
    


    cudaErrorNotPermitted                 =     800,

    



    cudaErrorNotSupported                 =     801,

    






    cudaErrorSystemNotReady               =     802,

    




    cudaErrorSystemDriverMismatch         =     803,

    






    cudaErrorCompatNotSupportedOnDevice   =     804,

    


    cudaErrorStreamCaptureUnsupported     =    900,

    



    cudaErrorStreamCaptureInvalidated     =    901,

    



    cudaErrorStreamCaptureMerge           =    902,

    


    cudaErrorStreamCaptureUnmatched       =    903,

    



    cudaErrorStreamCaptureUnjoined        =    904,

    




    cudaErrorStreamCaptureIsolation       =    905,

    



    cudaErrorStreamCaptureImplicit        =    906,

    



    cudaErrorCapturedEvent                =    907,
  
    




    cudaErrorStreamCaptureWrongThread     =    908,

    


    cudaErrorUnknown                      =     999,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeUnregistered = 0, 
    cudaMemoryTypeHost         = 1, 
    cudaMemoryTypeDevice       = 2, 
    cudaMemoryTypeManaged      = 3  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct __declspec(__device_builtin__)  cudaMemsetParams {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};





#line 1118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"





typedef void (__stdcall *cudaHostFn_t)(void *userData);




struct __declspec(__device_builtin__) cudaHostNodeParams {
    cudaHostFn_t fn;    
    void* userData; 
};




enum __declspec(__device_builtin__) cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone        = 0, 
    cudaStreamCaptureStatusActive      = 1, 
    cudaStreamCaptureStatusInvalidated = 2  

};





enum __declspec(__device_builtin__) cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal      = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed     = 2
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
    enum cudaResourceType resType;             
    
    union {
        struct {
            cudaArray_t array;                 
        } array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } linear;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } pitch2D;
    } res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    







    __declspec(deprecated) enum cudaMemoryType memoryType;

    



    enum cudaMemoryType type;

    








    int device;

    



    void *devicePointer;

    






    void *hostPointer;

    




    __declspec(deprecated) int isManaged;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   






   int preferredShmemCarveout;
};




enum __declspec(__device_builtin__) cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 
    cudaFuncAttributeMax
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04, 
    cudaLimitMaxL2FetchGranularity        = 0x05  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97, 
    cudaDevAttrCanFlushRemoteWrites           = 98, 
    cudaDevAttrHostRegisterSupported          = 99, 
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100, 
    cudaDevAttrDirectManagedMemAccessFromHost = 101 
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3, 
    cudaDevP2PAttrCudaArrayAccessSupported     = 4  
};






struct __declspec(__device_builtin__) CUuuid_st {     
    char bytes[16];
};
typedef __declspec(__device_builtin__) struct CUuuid_st CUuuid;
#line 1642 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




struct __declspec(__device_builtin__) cudaDeviceProp
{
    char         name[256];                  
    cudaUUID_t   uuid;                       
    char         luid[8];                    
    unsigned int luidDeviceNodeMask;         
    size_t       totalGlobalMem;             
    size_t       sharedMemPerBlock;          
    int          regsPerBlock;               
    int          warpSize;                   
    size_t       memPitch;                   
    int          maxThreadsPerBlock;         
    int          maxThreadsDim[3];           
    int          maxGridSize[3];             
    int          clockRate;                  
    size_t       totalConstMem;              
    int          major;                      
    int          minor;                      
    size_t       textureAlignment;           
    size_t       texturePitchAlignment;      
    int          deviceOverlap;              
    int          multiProcessorCount;        
    int          kernelExecTimeoutEnabled;   
    int          integrated;                 
    int          canMapHostMemory;           
    int          computeMode;                
    int          maxTexture1D;               
    int          maxTexture1DMipmap;         
    int          maxTexture1DLinear;         
    int          maxTexture2D[2];            
    int          maxTexture2DMipmap[2];      
    int          maxTexture2DLinear[3];      
    int          maxTexture2DGather[2];      
    int          maxTexture3D[3];            
    int          maxTexture3DAlt[3];         
    int          maxTextureCubemap;          
    int          maxTexture1DLayered[2];     
    int          maxTexture2DLayered[3];     
    int          maxTextureCubemapLayered[2];
    int          maxSurface1D;               
    int          maxSurface2D[2];            
    int          maxSurface3D[3];            
    int          maxSurface1DLayered[2];     
    int          maxSurface2DLayered[3];     
    int          maxSurfaceCubemap;          
    int          maxSurfaceCubemapLayered[2];
    size_t       surfaceAlignment;           
    int          concurrentKernels;          
    int          ECCEnabled;                 
    int          pciBusID;                   
    int          pciDeviceID;                
    int          pciDomainID;                
    int          tccDriver;                  
    int          asyncEngineCount;           
    int          unifiedAddressing;          
    int          memoryClockRate;            
    int          memoryBusWidth;             
    int          l2CacheSize;                
    int          maxThreadsPerMultiProcessor;
    int          streamPrioritiesSupported;  
    int          globalL1CacheSupported;     
    int          localL1CacheSupported;      
    size_t       sharedMemPerMultiprocessor; 
    int          regsPerMultiprocessor;      
    int          managedMemory;              
    int          isMultiGpuBoard;            
    int          multiGpuBoardGroupID;       
    int          hostNativeAtomicSupported;  
    int          singleToDoublePrecisionPerfRatio; 
    int          pageableMemoryAccess;       
    int          concurrentManagedAccess;    
    int          computePreemptionSupported; 
    int          canUseHostPointerForRegisteredMem; 
    int          cooperativeLaunch;          
    int          cooperativeMultiDeviceLaunch; 
    size_t       sharedMemPerBlockOptin;     
    int          pageableMemoryAccessUsesHostPageTables; 
    int          directManagedMemAccessFromHost; 
};

























































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;




enum __declspec(__device_builtin__) cudaExternalMemoryHandleType {
    


    cudaExternalMemoryHandleTypeOpaqueFd       = 1,
    


    cudaExternalMemoryHandleTypeOpaqueWin32    = 2,
    


    cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalMemoryHandleTypeD3D12Heap      = 4,
    


    cudaExternalMemoryHandleTypeD3D12Resource  = 5
};





 



struct __declspec(__device_builtin__) cudaExternalMemoryHandleDesc {
    


    enum cudaExternalMemoryHandleType type;
    union {
        




        int fd;
        










        struct {
            


            void *handle;
            



            const void *name;
        } win32;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalMemoryBufferDesc {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
};
 



struct __declspec(__device_builtin__) cudaExternalMemoryMipmappedArrayDesc {
    



    unsigned long long offset;
    


    struct cudaChannelFormatDesc formatDesc;
    


    struct cudaExtent extent;
    



    unsigned int flags;
    


    unsigned int numLevels;
};
 



enum __declspec(__device_builtin__) cudaExternalSemaphoreHandleType {
    


    cudaExternalSemaphoreHandleTypeOpaqueFd       = 1,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32    = 2,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalSemaphoreHandleTypeD3D12Fence     = 4
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreHandleDesc {
    


    enum cudaExternalSemaphoreHandleType type;
    union {
        



        int fd;
        









        struct {
            


            void *handle;
            



            const void *name;
        } win32;
    } handle;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreSignalParams {
    union {
        


        struct {
            


            unsigned long long value;
        } fence;
    } params;
    


    unsigned int flags;
};




struct __declspec(__device_builtin__) cudaExternalSemaphoreWaitParams {
    union {
        


        struct {
            


            unsigned long long value;
        } fence;
    } params;
    


    unsigned int flags;
};











typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;




typedef __declspec(__device_builtin__) struct CUexternalMemory_st *cudaExternalMemory_t;




typedef __declspec(__device_builtin__) struct CUexternalSemaphore_st *cudaExternalSemaphore_t;




typedef __declspec(__device_builtin__) struct CUgraph_st *cudaGraph_t;




typedef __declspec(__device_builtin__) struct CUgraphNode_st *cudaGraphNode_t;




enum __declspec(__device_builtin__) cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct __declspec(__device_builtin__) cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};




struct __declspec(__device_builtin__) cudaKernelNodeParams {
    void* func;                     
    dim3 gridDim;                   
    dim3 blockDim;                  
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




enum __declspec(__device_builtin__) cudaGraphNodeType {
    cudaGraphNodeTypeKernel  = 0x00, 
    cudaGraphNodeTypeMemcpy  = 0x01, 
    cudaGraphNodeTypeMemset  = 0x02, 
    cudaGraphNodeTypeHost    = 0x03, 
    cudaGraphNodeTypeGraph   = 0x04, 
    cudaGraphNodeTypeEmpty   = 0x05, 
    cudaGraphNodeTypeCount
};




typedef struct CUgraphExec_st* cudaGraphExec_t;


 




#line 2170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"



#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"






















































































































































































































































































































































































































































#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 92 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F= 2,  
	CUDA_C_16F= 6,  
	CUDA_R_32F= 0,  
	CUDA_C_32F= 4,  
	CUDA_R_64F= 1,  
	CUDA_C_64F= 5,  
	CUDA_R_8I = 3,  
	CUDA_C_8I = 7,  
	CUDA_R_8U = 8,  
	CUDA_C_8U = 9,  
	CUDA_R_32I= 10, 
	CUDA_C_32I= 11, 
	CUDA_R_32U= 12, 
	CUDA_C_32U= 13  
} cudaDataType; 


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;

#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\library_types.h"
#line 93 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

















































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"














































































#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"






















































































































































































































































































































































































































































#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"














































































































#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"

#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"




































































































































#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"

#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_device_runtime_api.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"





#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
    
    
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

















































#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"













#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"






#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"



#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"







#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"





#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"



extern "C" {
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);




















































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);











































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);





























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);














































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);







































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);










































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

























































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);


































extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 







































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);

























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);
















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);
































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);



































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);














































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 
























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);













































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);















extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 



























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);














































































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);




























































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);







































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);




















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);




































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);






























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);




































































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );













































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 






































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);













































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);

























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);


































































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);
























extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);


















































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, enum cudaStreamCaptureMode mode);


















































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *mode);



























extern __declspec(__host__) cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t *pGraph);





































extern __declspec(__host__) cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus);



























extern __declspec(__host__) cudaError_t __stdcall cudaStreamGetCaptureInfo(cudaStream_t stream, enum cudaStreamCaptureStatus *pCaptureStatus, unsigned long long *pId);

 



































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);






































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);






























extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);





























extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);










































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 








































































































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t *extMem_out, const struct cudaExternalMemoryHandleDesc *memHandleDesc);





















































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void **devPtr, cudaExternalMemory_t extMem, const struct cudaExternalMemoryBufferDesc *bufferDesc);






















































extern __declspec(__host__) cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *mipmap, cudaExternalMemory_t extMem, const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc);






















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem);





























































































extern __declspec(__host__) cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t *extSem_out, const struct cudaExternalSemaphoreHandleDesc *semHandleDesc);






































extern __declspec(__host__) cudaError_t __stdcall cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);










































extern __declspec(__host__) cudaError_t __stdcall cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t *extSemArray, const struct cudaExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, cudaStream_t stream = 0);





















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem);

 






























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);


































































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags  = 0);
















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);






















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);






































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value);























extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);























extern __declspec(deprecated)  __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

































































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void *userData);

 




















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);











































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 





















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
































extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);










































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);













































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);






















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);

































































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);



















































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);






















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);












































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);






































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);










































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);










































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);








































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);






























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);





















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);





















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);

























extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);














































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);





























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);























































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);











































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);



































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);


















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);



























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);


























extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);





































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);



















































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);


























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);






































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 

























































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);









































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);










































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);


















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

















































extern __declspec(deprecated) __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

 



































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);





















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 




























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);






































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);


































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);





































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 




































































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


























































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);





































extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);







































extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);

























extern __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);




























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);





























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 










































extern __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 
































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);





























extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);






















































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);


















extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);



















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);




















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 










































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);


















extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 































extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 












































extern __declspec(__host__) cudaError_t __stdcall cudaGraphCreate(cudaGraph_t *pGraph, unsigned int flags);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaKernelNodeParams *pNodeParams);
































extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, struct cudaKernelNodeParams *pNodeParams);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);











































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemcpy3DParms *pCopyParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, struct cudaMemcpy3DParms *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const struct cudaMemcpy3DParms *pNodeParams);









































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaMemsetParams *pMemsetParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, struct cudaMemsetParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const struct cudaMemsetParams *pNodeParams);








































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, const struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, struct cudaHostNodeParams *pNodeParams);






















extern __declspec(__host__) cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const struct cudaHostNodeParams *pNodeParams);





































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies, cudaGraph_t childGraph);























extern __declspec(__host__) cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t *pGraph);




































extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t *pGraphNode, cudaGraph_t graph, const cudaGraphNode_t *pDependencies, size_t numDependencies);


























extern __declspec(__host__) cudaError_t __stdcall cudaGraphClone(cudaGraph_t *pGraphClone, cudaGraph_t originalGraph);



























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t *pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, enum cudaGraphNodeType *pType);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t *pRootNodes, size_t *pNumRootNodes);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t *from, cudaGraphNode_t *to, size_t *numEdges);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t *pDependencies, size_t *pNumDependencies);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t *pDependentNodes, size_t *pNumDependentNodes);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);






























extern __declspec(__host__) cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t *from, const cudaGraphNode_t *to, size_t numDependencies);

























extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node);



































extern __declspec(__host__) cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t *pGraphExec, cudaGraph_t graph, cudaGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const struct cudaKernelNodeParams *pNodeParams);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream);




















extern __declspec(__host__) cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec);



















extern __declspec(__host__) cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);





































































































































































































































#line 9462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"











#line 9474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"


}

#line 9479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"


#line 9482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"







#line 9490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"

#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"










































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"


 

#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\channel_descriptor.h"
#line 96 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
#line 97 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"














































































#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"






















































































































































































































































































































































































































































#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_functions.h"
#line 98 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"

#line 100 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/host_defines.h"
#line 101 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"



#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"

#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x);

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x);

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y);

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z);

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x);

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x);

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y);

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z);

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w);

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x);

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x);

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y);

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z);

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w);

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x);

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x);

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y);

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z);

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x);

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y);

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z);

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w);

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x);

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y);

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x);

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y);

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z);

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w);




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.hpp"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\cuda_runtime_api.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.hpp"



#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.hpp"

#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.hpp"

#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"

#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_functions.h"
#line 102 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"











#line 114 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/bin/../include\\cuda_runtime.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"














































































#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\driver_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"






















































































































































































































































































































































































































































#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\builtin_types.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt\\host_defines.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt\\host_defines.h"



















































































































































































#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt\\host_defines.h"




#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt\\host_defines.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"




#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"







#pragma once




#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);
#line 31 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"










































    
    
    
    
    
#line 79 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 127 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 132 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"
#line 12 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



 
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
#line 13 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }
#pragma warning(suppress:4996) 
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

#pragma warning(suppress:4996) 
        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 86 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
 int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
 int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"

    












#line 71 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"

#line 73 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"





    
     void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
     int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );

#line 94 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }

#line 111 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 117 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"
#line 14 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
     errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
     errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
     wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"











#line 77 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
      wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 105 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 107 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 119 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
  wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 128 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)

 
 size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 146 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

#line 150 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
 size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 162 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
    
#line 166 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 175 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 182 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 190 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 204 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 212 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
 wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 237 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
        



    #line 242 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 
    #pragma warning(disable: 28719 28726 28727) 
      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 258 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 269 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 273 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



 
  
 wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


 errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 294 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 
  
 wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

  errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 313 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

   int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

   int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

   int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

   int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

  errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 351 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 359 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

  errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 375 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 382 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 392 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 397 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 410 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 417 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 428 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 433 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


 errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 446 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 453 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 

 size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

 size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
 int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
 int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 565 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"









    


#line 578 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

      
     wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 587 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    
    

      
     int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      
     int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    
     
     wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    
     
     wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    
     
     wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    
     
     wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      
     int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 644 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 650 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#line 15 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







    
     errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
     errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
     errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
     errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
     errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
     char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 71 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 84 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 95 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#pragma warning(pop)

#line 98 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
 int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 138 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#pragma warning(pop)

 
 size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 150 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 159 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 
  
 char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


 errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 179 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
  
 char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 191 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
 int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


 errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 233 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strlwr( char *_String);
#line 238 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


 errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 251 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 258 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 265 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 273 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 337 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 345 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 

#line 351 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

#line 355 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
 size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 367 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
    
#line 371 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 380 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


 errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 395 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 403 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

 char* __cdecl _strrev(
      char* _Str
    );


 errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 426 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 432 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
 char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


 errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 455 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strupr( char *_String);
#line 460 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


 errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 473 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

  char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 480 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 

 size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

 size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 528 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"





    
    
      
     char* __cdecl strdup(
          char const* _String
        );
    

    
      
     int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
     int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
     char* __cdecl strlwr(
          char* _String
        );

      
     int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
     char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
     char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
     char* __cdecl strupr(
          char* _String
        );

#line 589 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 595 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 596 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"







#pragma once




#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 
 
  
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

   wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 14 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 45 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
















  
 int* __cdecl __daylight(void);




  
 long* __cdecl __dstbias(void);




  
 long* __cdecl __timezone(void);




    
 char** __cdecl __tzname(void);



  
 errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
 errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
 errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
 errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
 char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
     errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 130 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 136 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 clock_t __cdecl clock(void);

 
 
  
 char* __cdecl _ctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 159 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 
  
 char* __cdecl _ctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 179 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
 double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
 struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
 struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
 __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
 __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


 __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


 __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

 size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


 errno_t __cdecl _strdate_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

   char* __cdecl _strdate( char *_Buffer);
#line 294 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"


 errno_t __cdecl _strtime_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

  char* __cdecl _strtime( char *_Buffer);
#line 310 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 __time32_t __cdecl _time32(
      __time32_t* _Time
    );

 __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
 int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
 int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










     void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 357 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    











































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 577 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

    #line 579 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 581 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    

    
          void __cdecl tzset(void);
    #line 596 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 598 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 603 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"

extern "C"
{
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"
extern  __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void)


#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"
;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"








#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v10.1\\include\\crt/common_functions.h"

#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"

#pragma once



#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

#pragma once





#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

#pragma once



#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

#pragma once



#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

#pragma once





#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	using value_type = _Ty;
	using type = integral_constant;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	 constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	using type = _Ty;
	};

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	using type = _Ty2;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	using type = _Ty1;
	};

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

template<class _Ty,
	class _Uty>
	 constexpr bool is_same_v = is_same<_Ty, _Uty>::value;

	
template<class _Ty>
	struct remove_const
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

	
template<class _Ty>
	struct remove_volatile
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

	
template<class _Ty>
	struct remove_cv
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 198 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	 constexpr bool is_integral_v = is_integral<_Ty>::value;

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	 constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;

	
template<class _Ty>
	struct is_arithmetic
		: bool_constant<is_integral_v<_Ty>
			|| is_floating_point_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;

	
template<class _Ty>
	struct remove_reference
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 343 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
#line 344 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"





#line 9 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using :: ptrdiff_t; using :: size_t;
typedef double max_align_t;	













































































#line 98 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

}

using ::std:: max_align_t;	



#pragma warning(pop)
#pragma pack(pop)

#line 109 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
#line 110 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"





#line 7 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

#pragma once





#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );

 
void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize_base(
      void* _Block
    );

 
 
size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 225 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 14 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);




     
     void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

     void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );

#line 44 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"



 
 void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
 void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
 void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );




















































































#line 185 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"





      
     void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      
     void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

#line 209 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 15 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {


































     
    
     errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 63 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 70 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

     
    
     errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 86 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 93 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

    
     errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 108 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

      wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 115 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

     
     double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     double __cdecl _wtof(
          wchar_t const* _String
        );

     
     double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     int __cdecl _wtoi(
          wchar_t const* _String
        );

     
     int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long __cdecl _wtol(
          wchar_t const* _String
        );

     
     long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
     long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
     errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    
     wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
     errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    
     wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
     __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
     __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

    
    

     
     
     __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );

    

    
     errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 361 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
  void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 373 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    
     void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

     errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 404 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

        
        

        
         errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );

        

          
         wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
         errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

         
         int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
         errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

         errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 463 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

          void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 470 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

         int __cdecl _wsystem(
              wchar_t const* _Command
            );

#line 476 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 16 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 25 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









 void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );













     __declspec(noreturn) void __cdecl exit(  int _Code);
     __declspec(noreturn) void __cdecl _exit(  int _Code);
     __declspec(noreturn) void __cdecl _Exit(  int _Code);
     __declspec(noreturn) void __cdecl quick_exit(  int _Code);
     __declspec(noreturn) void __cdecl abort(void);
#line 58 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"





 unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    

    typedef int (__cdecl* _onexit_t)(void);
    


#line 78 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


    
    
#line 83 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 143 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
     _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

     _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 186 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"












#line 199 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









  int __cdecl _set_error_mode(  int _Mode);




     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);
    

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);

    
      char** __cdecl __sys_errlist(void);
    

      int * __cdecl __sys_nerr(void);
    

     void __cdecl perror(  char const* _ErrMsg);
#line 234 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




  char**    __cdecl __p__pgmptr (void);
  wchar_t** __cdecl __p__wpgmptr(void);
  int*      __cdecl __p__fmode  (void);








    
    
    
#line 253 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 
 errno_t __cdecl _get_pgmptr (  char**    _Value);

 
 errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

 errno_t __cdecl _set_fmode  (               int       _Mode );

 errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

   div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
   ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540)

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






 void __cdecl srand(  unsigned int _Seed);

   int __cdecl rand(void);



#line 353 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 380 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 410 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                      double    __cdecl atof   (  char const* _String);
    int       __cdecl atoi   (  char const* _String);
                      long      __cdecl atol   (  char const* _String);
                      long long __cdecl atoll  (  char const* _String);
                      __int64   __cdecl _atoi64(  char const* _String);

   double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
   int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
   long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
   long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
   __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

   int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
   int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
   int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
 int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
 int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
 int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
 float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
 float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
 double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
 long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

 errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 636 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
  char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 646 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

 errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 663 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 670 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 

 errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 686 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
  char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 695 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

 errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

 char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

 errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


 char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

 errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 761 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  
 char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

 errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 790 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 
  
 char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
 errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 815 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


 char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 836 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
        
    #line 838 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    


        
    #line 844 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

     
     int __cdecl ___mb_cur_max_func(void);

     
     int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 851 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"



 
 int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
 int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
 size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
 size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
 int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
 int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


 errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 926 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 933 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


 errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 952 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 961 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"





 int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


 int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
     errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 989 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


 errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1014 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1021 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


 errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1040 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1049 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




















 
 
 __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




 errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1097 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
  void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1109 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)


 void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


 errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }




 
 errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );

#line 1147 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




 int*       __cdecl __p___argc (void);
 char***    __cdecl __p___argv (void);
 wchar_t*** __cdecl __p___wargv(void);






    
    
    
#line 1164 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 char***    __cdecl __p__environ (void);
 wchar_t*** __cdecl __p__wenviron(void);


    
#line 1171 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"







    
    
#line 1181 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









      
     char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1201 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    


#line 1206 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    
     errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1217 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

     int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
     int __cdecl _putenv(
          char const* _EnvString
        );

    
     errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

     errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1253 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

      void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1260 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
     void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
     void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
     void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1279 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
     char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
     char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
     char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

     
     char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

     
     char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
     void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
     char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

      
     int __cdecl putenv(
          char const* _EnvString
        );

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1363 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))
#line 1368 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 9 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\math.h"










#line 1 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {

#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 




    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 48 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
    #line 49 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 50 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"










#line 61 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
    typedef float  float_t;
    typedef double double_t;
#line 64 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"















    
        extern double const _HUGE;
    

#line 84 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 85 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


    
#line 89 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


















































































void __cdecl _fperrraise(  int _Except);

   short __cdecl _dclass(  double _X);
   short __cdecl _ldclass(  long double _X);
   short __cdecl _fdclass(  float _X);

   int __cdecl _dsign(  double _X);
   int __cdecl _ldsign(  long double _X);
   int __cdecl _fdsign(  float _X);

   int __cdecl _dpcomp(  double _X,   double _Y);
   int __cdecl _ldpcomp(  long double _X,   long double _Y);
   int __cdecl _fdpcomp(  float _X,   float _Y);

   short __cdecl _dtest(  double* _Px);
   short __cdecl _ldtest(  long double* _Px);
   short __cdecl _fdtest(  float* _Px);

 short __cdecl _d_int(  double* _Px,   short _Xexp);
 short __cdecl _ld_int(  long double* _Px,   short _Xexp);
 short __cdecl _fd_int(  float* _Px,   short _Xexp);

 short __cdecl _dscale(  double* _Px,   long _Lexp);
 short __cdecl _ldscale(  long double* _Px,   long _Lexp);
 short __cdecl _fdscale(  float* _Px,   long _Lexp);

 short __cdecl _dunscale(  short* _Pex,   double* _Px);
 short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
 short __cdecl _fdunscale(  short* _Pex,   float* _Px);

   short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
   short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
   short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

   short __cdecl _dnorm(  unsigned short* _Ps);
   short __cdecl _fdnorm(  unsigned short* _Ps);

   double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
   long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
   float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

   double __cdecl _dlog(  double _X,   int _Baseflag);
   long double __cdecl _ldlog(  long double _X,   int _Baseflag);
   float __cdecl _fdlog(  float _X,   int _Baseflag);

   double __cdecl _dsin(  double _X,   unsigned int _Qoff);
   long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
   float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 461 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"





      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

       double    __cdecl acosh(  double _X);
       double    __cdecl asinh(  double _X);
       double    __cdecl atanh(  double _X);
        double    __cdecl atof(  char const* _String);
        double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
       double    __cdecl _cabs(  struct _complex _Complex_value);
       double    __cdecl cbrt(  double _X);
       double    __cdecl ceil(  double _X);
       double    __cdecl _chgsign(  double _X);
       double    __cdecl copysign(  double _Number,   double _Sign);
       double    __cdecl _copysign(  double _Number,   double _Sign);
       double    __cdecl erf(  double _X);
       double    __cdecl erfc(  double _X);
       double    __cdecl exp2(  double _X);
       double    __cdecl expm1(  double _X);
       double    __cdecl fdim(  double _X,   double _Y);
       double    __cdecl floor(  double _X);
       double    __cdecl fma(  double _X,   double _Y,   double _Z);
       double    __cdecl fmax(  double _X,   double _Y);
       double    __cdecl fmin(  double _X,   double _Y);
       double    __cdecl frexp(  double _X,   int* _Y);
       double    __cdecl hypot(  double _X,   double _Y);
       double    __cdecl _hypot(  double _X,   double _Y);
       int       __cdecl ilogb(  double _X);
       double    __cdecl ldexp(  double _X,   int _Y);
       double    __cdecl lgamma(  double _X);
       long long __cdecl llrint(  double _X);
       long long __cdecl llround(  double _X);
       double    __cdecl log1p(  double _X);
       double    __cdecl log2(  double _X);
       double    __cdecl logb(  double _X);
       long      __cdecl lrint(  double _X);
       long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

       double __cdecl modf(  double _X,   double* _Y);
       double __cdecl nan(  char const* _X);
       double __cdecl nearbyint(  double _X);
       double __cdecl nextafter(  double _X,   double _Y);
       double __cdecl nexttoward(  double _X,   long double _Y);
       double __cdecl remainder(  double _X,   double _Y);
       double __cdecl remquo(  double _X,   double _Y,   int* _Z);
       double __cdecl rint(  double _X);
       double __cdecl round(  double _X);
       double __cdecl scalbln(  double _X,   long _Y);
       double __cdecl scalbn(  double _X,   int _Y);
       double __cdecl tgamma(  double _X);
       double __cdecl trunc(  double _X);
       double __cdecl _j0(  double _X );
       double __cdecl _j1(  double _X );
       double __cdecl _jn(int _X,   double _Y);
       double __cdecl _y0(  double _X);
       double __cdecl _y1(  double _X);
       double __cdecl _yn(  int _X,   double _Y);

       float     __cdecl acoshf(  float _X);
       float     __cdecl asinhf(  float _X);
       float     __cdecl atanhf(  float _X);
       float     __cdecl cbrtf(  float _X);
       float     __cdecl _chgsignf(  float _X);
       float     __cdecl copysignf(  float _Number,   float _Sign);
       float     __cdecl _copysignf(  float _Number,   float _Sign);
       float     __cdecl erff(  float _X);
       float     __cdecl erfcf(  float _X);
       float     __cdecl expm1f(  float _X);
       float     __cdecl exp2f(  float _X);
       float     __cdecl fdimf(  float _X,   float _Y);
       float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
       float     __cdecl fmaxf(  float _X,   float _Y);
       float     __cdecl fminf(  float _X,   float _Y);
       float     __cdecl _hypotf(  float _X,   float _Y);
       int       __cdecl ilogbf(  float _X);
       float     __cdecl lgammaf(  float _X);
       long long __cdecl llrintf(  float _X);
       long long __cdecl llroundf(  float _X);
       float     __cdecl log1pf(  float _X);
       float     __cdecl log2f(  float _X);
       float     __cdecl logbf(  float _X);
       long      __cdecl lrintf(  float _X);
       long      __cdecl lroundf(  float _X);
       float     __cdecl nanf(  char const* _X);
       float     __cdecl nearbyintf(  float _X);
       float     __cdecl nextafterf(  float _X,   float _Y);
       float     __cdecl nexttowardf(  float _X,   long double _Y);
       float     __cdecl remainderf(  float _X,   float _Y);
       float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
       float     __cdecl rintf(  float _X);
       float     __cdecl roundf(  float _X);
       float     __cdecl scalblnf(  float _X,   long _Y);
       float     __cdecl scalbnf(  float _X,   int _Y);
       float     __cdecl tgammaf(  float _X);
       float     __cdecl truncf(  float _X);

    



#line 588 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    

           float __cdecl _logbf(  float _X);
           float __cdecl _nextafterf(  float _X,   float _Y);
           int   __cdecl _finitef(  float _X);
           int   __cdecl _isnanf(  float _X);
           int   __cdecl _fpclassf(  float _X);

           int   __cdecl _set_FMA3_enable(  int _Flag);
           int   __cdecl _get_FMA3_enable(void);

    




#line 606 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"



    

           float __cdecl acosf(  float _X);
           float __cdecl asinf(  float _X);
           float __cdecl atan2f(  float _Y,   float _X);
           float __cdecl atanf(  float _X);
           float __cdecl ceilf(  float _X);
           float __cdecl cosf(  float _X);
           float __cdecl coshf(  float _X);
           float __cdecl expf(  float _X);

    









































#line 663 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    



#line 669 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }

    #line 676 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    

           float __cdecl floorf(  float _X);
           float __cdecl fmodf(  float _X,   float _Y);

    











#line 695 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }

    

           float  __cdecl log10f(  float _X);
           float  __cdecl logf(  float _X);
           float  __cdecl modff(  float _X,   float *_Y);
           float  __cdecl powf(  float _X,   float _Y);
           float  __cdecl sinf(  float _X);
           float  __cdecl sinhf(  float _X);
           float  __cdecl sqrtf(  float _X);
           float  __cdecl tanf(  float _X);
           float  __cdecl tanhf(  float _X);

    

















































#line 774 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

       long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

       long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

       long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

       long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

       long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

       long double __cdecl erfl(  long double _X);
       long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

       long double __cdecl exp2l(  long double _X);
       long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

       long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

       long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
       long double __cdecl fmaxl(  long double _X,   long double _Y);
       long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

       int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

       long double __cdecl lgammal(  long double _X);
       long long __cdecl llrintl(  long double _X);
       long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

       long double __cdecl log1pl(  long double _X);
       long double __cdecl log2l(  long double _X);
       long double __cdecl logbl(  long double _X);
       long __cdecl lrintl(  long double _X);
       long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

       long double __cdecl nanl(  char const* _X);
       long double __cdecl nearbyintl(  long double _X);
       long double __cdecl nextafterl(  long double _X,   long double _Y);
       long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

       long double __cdecl remainderl(  long double _X,   long double _Y);
       long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
       long double __cdecl rintl(  long double _X);
       long double __cdecl roundl(  long double _X);
       long double __cdecl scalblnl(  long double _X,   long _Y);
       long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

       long double __cdecl tgammal(  long double _X);
       long double __cdecl truncl(  long double _X);

    



#line 962 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"



    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 980 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

            double __cdecl j0(  double _X);
            double __cdecl j1(  double _X);
            double __cdecl jn(  int _X,   double _Y);
            double __cdecl y0(  double _X);
            double __cdecl y1(  double _X);
            double __cdecl yn(  int _X,   double _Y);
    #line 988 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

#line 990 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


#pragma warning(pop)

} __pragma(pack(pop))
#line 996 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 12 "D:\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\math.h"




#line 10 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 53 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 67 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#line 68 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"





#line 8 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 1 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(nullptr), _Last(nullptr)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	 constexpr const _Elem * begin() const noexcept
		{	
		return (_First);
		}

	 constexpr const _Elem * end() const noexcept
		{	
		return (_Last);
		}

	 constexpr size_t size() const noexcept
		{	
		return (static_cast<size_t>(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem>
	 constexpr const _Elem * begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem>
	 constexpr const _Elem * end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 79 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
#line 80 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"





#line 9 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class>
	
	 constexpr bool _Always_false = false;

		
 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 46 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct not_equal_to
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty = void>
	struct greater
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<class _Ty = void>
	struct greater_equal
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty = void>
	struct less_equal
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct not_equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<class _Ty>
	 constexpr _Ty * addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}

template<class _Ty>
	const _Ty * addressof(const _Ty&&) = delete;

		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}
}




 





 #line 360 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 



#line 366 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 #line 368 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 








 #line 379 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 



 

#line 388 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"























#line 412 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
 

#line 415 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
























#line 440 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
 

#line 443 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"





































#line 481 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
 












#line 495 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 501 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 502 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"





#line 7 "D:\\Soft\\Vistual Studio2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 #pragma warning(disable: 4180)	

namespace std {
	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral_v<_Ty>,
		"integer_sequence<T, I...> requires T to be an integral type.");

	using value_type = _Ty;

	 static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Conjunction
	{	
	using type = _First;
	};

template<class _True,
	class _Next,
	class... _Rest>
	struct _Conjunction<true, _True, _Next, _Rest...>
	{	
	using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct conjunction
		: true_type
	{	
	};

template<class _First,
	class... _Rest>
	struct conjunction<_First, _Rest...>
		: _Conjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	 constexpr bool conjunction_v = conjunction<_Traits...>::value;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Disjunction
	{	
	using type = _First;
	};

template<class _False,
	class _Next,
	class... _Rest>
	struct _Disjunction<false, _False, _Next, _Rest...>
	{	
	using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct disjunction
		: false_type
	{	
	};

template<class _First,
	class... _Rest>
	struct disjunction<_First, _Rest...>
		: _Disjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	 constexpr bool disjunction_v = disjunction<_Traits...>::value;

	
template<class _Trait>
	struct negation
		: bool_constant<!static_cast<bool>(_Trait::value)>
	{	
	};

template<class _Trait>
	 constexpr bool negation_v = negation<_Trait>::value;

	
template<class _Ty,
	class... _Types>
	 constexpr bool _Is_any_of_v = disjunction_v<is_same<_Ty, _Types>...>;

	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	 typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	 typedef _Ty1 first_argument_type;
	 typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	using _Bool_type = false_type;
	};











template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };











template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

template<class _Ty>
	 constexpr bool is_function_v = is_function<_Ty>::value;


template<class _Ty>
	struct _Is_memfunptr
	{	
	using _Bool_type = false_type;
	};














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type;  typedef _